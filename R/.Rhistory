if (B5_6$theta_angle[i] == theta_ref || B5_6$theta_angle[i] == alph_ref) {
B5_6$ortho[i] <- 1
} else {
B5_6$ortho[i] <- 0
} #end else-if
} #end for-loop
#B5_6[8,6] <- 255
B5_6
#loop for plotting into graph
n1=1
for (n1 in len) {
cat("PC_nr=", B5_6$lnr[n1], "\n")
browser()
theta_angle <- B5_6$theta_angle[n1]
theta_math <- (180 - theta_angle) #theta of oriented line
x <- centers_PC[n1,2]
y <- centers_PC[n1,3]
p2<- round(x * cos(theta_math/omega) + y * sin(theta_math/omega))
cat("p2= ",p2,"\n")
a <- -1/tan(theta_math/omega)
b <- round(p2/sin(theta_math/omega))
coef = c(b,a)
if (is.finite(a)) {
abline(coef, col="green", lty=1, lwd=2, asp=1)
}
} # end loop
source("~/GitHub/buildenh/R/line_detection_v1.1.R")
b13_angle_df
locator(1)
locator2()
locator(1)
#function
plot_PC_2scales <- function() {
setwd(home_dir)
lnr <- 1 #manual input of line number
#browser() #with interaction?
cat("lnr= ",lnr,"\n")
H <- array(dim=c(n_theta,n_ro)) # init of Hough matrix
i <- 0
while (i < n_theta) {
i <- i + 1
H[,] <- 0
} #end H null-stellung
#generation of H
ratio <- (n_ro-1)/(ro[n_ro]-ro_1)
X <- pc3$col
Y <- pc3$row
n_X <- length(X)
P <- matrix(nrow=n_X, ncol=3)
P[,] <- 0
#loop for all points of selected pixel cluster(PC)
k1 <- 0
k3 <- 1
while (k1 < n_X){
k1 <- k1+1
i <- 0
while (i < n_theta) {
i <- i+1
PC_segment_4(1) #calculation of PointCloud of segment #1
} #end loop i
} #end loop k1
n_P <- k3-1
cat("lnr=",lnr,"n_P=",n_P,"\n")
setwd(home_dir)
f <- paste("./data/ISPRS7/b",bnr2,"_",lnr,".txt",sep="")
write.table(P[1:n_P,],file=f, sep="   ")
#
#plot point cloud
#use large scale or small scale presentation
#
#points(P[,2],-P[,3], pch=".", asp=1, cex=3.0, col="red") #switch to 'Plots' to see plot (graphics)
points(P[,2]-orig_x,P[,3]-orig_y,pch=".",asp=1,cex=4.0,col="red") #switch to 'Plots' (enlarged ortho)
#end plot of line segment
} #end of function 'plot_PC_2scales'
##digitize and plot new center of object
coo <- new_centre()
##digitize and plot new center of object
coo <- new_centre()
coo <- new_centre()
coo <- new_centre()
new_centre_auto()
b13_angle_df
##digitize and plot new center of object
coo <- new_centre()
##digitize and plot new center of object
coo <- new_centre()
##calculation of center of segment
coo2 <- new_centre_auto() #call of function
##correction of midpoint position and calculation of angle
answ <- readline("Is the position of all midpoints correct? type N if it is not:  ")
midpoints
n_RepPoint <- 5 #row number of midpoint to be corrected (PC_4)
n_RepPoint <- 8 #row number of midpoint to be corrected (PC_4)
n_RepPoint <- as.integer(n_RepPoint)
b13_angle_df$nr_center <- midpoints[,1]
b13_angle_df
all_PC
r_dist <- dist_v2(n_RepPoint, b13_angle_df, all_PC) #call of function
r_dist <- round(r_dist)
np_r <- max(r_dist)
#plot of course of line
x <- 100
y <- 100
plot(x,y,pch = 3,col="red",cex=0.8,xlim=c(0,np_r),ylim=c(np_r,0),xlab="i",
ylab="r",axes=T,frame.plot=T,main="course of line")
#loop
i <- 1
while (i < np) {
x <- i
y <- r_dist[i]
points(x, y, pch = 20, col="red", cex = 0.8)
i <- i+1
}
i <- 250 #r-value, determined from graph (manual operation)
x <- i
y <- r_dist[i]
points(x,y,pch=20,col="cyan",cex=1.8)
np <- nrow(all_PC[[n_RepPoint]])
all_PC2 <- all_PC
all_PC2[[n_RepPoint]]$dist <- round(r_dist)
i <- 250 #determined from graph
r_dist[i]
x_centre <- all_PC2[[n_RepPoint]]$x[i]
y_centre <- all_PC2[[n_RepPoint]]$y[i]
#plot
points(x_centre,-y_centre,pch=20,col="red",cex=1.5)
b13_angle_df$x_centre[n_RepPoint] <- x_centre
b13_angle_df$y_centre[n_RepPoint] <- y_centre
b13_angle_df
midpoints
n_RepPoint <- 8 #row number of midpoint to be corrected (PC_4)
n_RepPoint <- as.integer(n_RepPoint)
b13_angle_df$nr_center <- midpoints[,1]
b13_angle_df
all_PC
r_dist <- dist_v2(n_RepPoint, b13_angle_df, all_PC) #call of function
r_dist <- round(r_dist)
np_r <- max(r_dist)
#plot of course of line
x <- 100
y <- 100
plot(x,y,pch = 3,col="red",cex=0.8,xlim=c(0,np_r),ylim=c(np_r,0),xlab="i",
ylab="r",axes=T,frame.plot=T,main="course of line")
#loop
i <- 1
while (i < np) {
x <- i
y <- r_dist[i]
points(x, y, pch = 20, col="red", cex = 0.8)
i <- i+1
}
i <- 250 #r-value, determined from graph (manual operation)
x <- i
y <- r_dist[i]
points(x,y,pch=20,col="cyan",cex=1.8)
np <- nrow(all_PC[[n_RepPoint]])
all_PC2 <- all_PC
all_PC2[[n_RepPoint]]$dist <- round(r_dist)
i <- 250 #determined from graph
r_dist[i]
x_centre <- all_PC2[[n_RepPoint]]$x[i]
y_centre <- all_PC2[[n_RepPoint]]$y[i]
#plot
points(x_centre,-y_centre,pch=20,col="red",cex=1.5)
#plot
points(x_centre,-y_centre,pch=20,col="green",cex=1.5)
b13_angle_df$x_centre[n_RepPoint] <- x_centre
b13_angle_df$y_centre[n_RepPoint] <- y_centre
b13_angle_df
i <- 150 #r-value, determined from graph (manual operation)
x <- i
y <- r_dist[i]
points(x,y,pch=20,col="cyan",cex=1.8)
np <- nrow(all_PC[[n_RepPoint]])
all_PC2 <- all_PC
all_PC2[[n_RepPoint]]$dist <- round(r_dist)
i <- 150 #determined from graph
r_dist[i]
x_centre <- all_PC2[[n_RepPoint]]$x[i]
y_centre <- all_PC2[[n_RepPoint]]$y[i]
#plot
points(x_centre,-y_centre,pch=20,col="green",cex=1.5)
b13_angle_df$x_centre[n_RepPoint] <- x_centre
b13_angle_df$y_centre[n_RepPoint] <- y_centre
b13_angle_df
source("~/GitHub/buildenh/R/sequence_of_lines_v1.1.R")
k_y_auto
k_part == "2"
k_part = "2"
n_y_auto=1
n_y_auto <- n_y_auto + 1
source("~/GitHub/buildenh/R/startup_buildenh_v1.1.R")
#description: extraction of one building
#from image "buildings of generated land cover map"
#orthoimage: ISPRS data "Vaihingen" of areas: #7, #1
#instruction: use plot of building numbers in 'support_extract_single_building' for selecting of object
#author: Joachim Hoehle
cat("###########################################################################","\n")
#name of program (script): extract_single_building.R
cat("version_number= ",v_nr,"\n")
#description: extraction of one building
#from image "buildings of generated land cover map"
#orthoimage: ISPRS data "Vaihingen" of areas: #7, #1
#instruction: use plot of building numbers in 'support_extract_single_building' for selecting of object
#author: Joachim Hoehle
cat("###########################################################################","\n")
cat("start of program 'extract_single_building'","\n")
setwd(home_dir)
##mode of processing
cat("select mode of processing? - demo: 1, obj_wise: 2, auto: 3","\n")
answ <- readline("mode of processing? - type 1, 2, or 3: ") #processing mode
if (answ == "1" && Img_name == "ISPRS7") { #processing of one example
proc_mode <- "demo" #object b18 (ISPRS7)
bnr2 <- 18
part = "no_part"
}
if (answ == "1" && Img_name == "ISPRS1") { #processing of one example
proc_mode <- "demo" #object b43
bnr2 <- 11
part = "no_part"
}
if (answ == "2") {
proc_mode <- "obj_wise" #object-wise processing
}
if (answ == "3") {
proc_mode <- "auto" #automatic processing of orthoimage
}
if (proc_mode == "obj_wise") {
bnr2 <- readline("type the label of building to be processed: ") #label of building by manual input
bnr2 <- as.integer(bnr2)
}
bnr2 <- y_auto[k_y_auto]
}
if (proc_mode == "obj_wise") {
bnr2 <- readline("type the label of building to be processed: ") #label of building by manual input
bnr2 <- as.integer(bnr2)
}
bnr2 <- readline("type the label of building to be processed: ") #label of building by manual input
if (proc_mode == "obj_wise") {
bnr2 <- readline("type the label of building to be processed: ") #label of building by manual input
bnr2 <- as.integer(bnr2)
}
if (proc_mode == "auto") {
bnr2 <- y_auto[k_y_auto]
}
cat("processing mode= ", proc_mode,"\n")
if (substr(bnr2,3,3) == "1" || substr(bnr2,3,3) == "2") {
bnr2_part <- bnr2
} else {
bnr2_orig <- bnr2
part <- "no_part"
bnr2_part <- "NA" #setup for partition
}
cat("label of building to be extracted= ", bnr2,"\n")
if (part == "2parts_1" || part == "2parts_2") { #repeated? see line 52
bnr2 <- as.numeric(substr(bnr2,1,2))
bnr2_orig <- bnr2
} #end if
if (part == "no_part") {
bnr2_orig <- bnr2
}
cat("label of building to be extracted=", bnr2,"\n") #check if new number is necessary
#input of enhanced billede
setwd(home_dir)
LCM_enh_b=readImage(paste("./data/",Img_name,"/images/LCM_cart_enh_b3_scaled_2.jpg",sep = "")) #classification by method JH, scaled affine
display(LCM_enh_b, method="browser") #use for checking of image
##enhancement of raster image
LCM_enh_b_t <- thresh(LCM_enh_b,2,2,0.01) #thresholding -> white outlines
display(LCM_enh_b_t, method="raster")
LCM_enh_b_t_f <- fillHull(LCM_enh_b_t)
display(LCM_enh_b_t_f,"raster")
LCM_label_A <- bwlabel(LCM_enh_b_t_f) #labeling for area
cat('number of buildings=', max(LCM_label_A),'\n')
display(LCM_label_A, method="raster")
LCM_enh_b_t_f_t2 <- thresh(LCM_enh_b_t_f, 2,2,0.01) #threshholding
display(LCM_enh_b_t_f_t2, method="raster")
LCM_label <- bwlabel(LCM_enh_b_t_f_t2) #labeling for perimeter
display(LCM_label)
##display as negative
LCM_enh_b_t_neg <- (1-LCM_enh_b_t)
#display(LCM_enh_b_t_neg, method="browser")
display(LCM_enh_b_t_neg, method="raster")
##extraction of features (area,radius)
setwd(home_dir)
coor <- computeFeatures.moment(LCM_label) #geometric features (moment)
n9 <- nrow(coor)
cat('number of buildings=',n9,'\n')
shap<-computeFeatures.shape(LCM_label) #geometric features (shape)
shap
n8 <- nrow(shap) #number of buildings to enhance
cat('number of buildings=',n8,'\n')
shap_A<-computeFeatures.shape(LCM_label_A) #geometric features (shape)
shap_A
n7<-nrow(shap_A)
shap1_A<-matrix(nrow=n7,ncol=10)
y<-1:n7
for (n in y){
shap1_A[,2:7]<-shap_A[,1:6]
}
shap1_A[,1] <- y
shap1_A<-data.frame(shap1_A)
shap1_A[,8:9] <- coor[,1:2]
shap1_A[,10] <- coor[,5]
shap2_A <- subset(shap1_A,shap1_A[,2] >= 3086) #removes buildings of area < 5m x 5m (3086 pixels)
n8 <- nrow(shap2_A)
cat('number of buildings after area-thresh-holding=',n8,'\n')
rownames(shap2_A) <- 1:n8
names(shap2_A)<-c("bnr","area", "perimeter", "radius.mean", "radius.sd", "radius.min","radius.max","cx","cy","alpha_arc")
shap2_A
y3 <- nrow(shap2_A)
shap2_A_red3<-shap2_A #if no points are removed
shap2_A_red3
#output of shape-data
f2=paste("./data/",Img_name,"/shap2_A_red3.csv",sep = "")
write.table(shap2_A_red3,f2)
##extraction of one building
cas <- "NA" #case "NA"
sek <- "NA"
xc <- shap2_A_red3[bnr2,8]
yc <- shap2_A_red3[bnr2,9]
points(xc, yc, col="blue",asp=1, pch=16, cex=1.0)
omega=180/pi
alpha <- shap2_A_red3[bnr2,10]*omega # approximate orientation angle of object
r_max <- shap2_A_red3[bnr2,7]
##write.table plot-parameters of building
plotPar <- c(xc,yc,r_max,alpha)
plotPar_orig <- plotPar
##generation of table (bnr/bnr2)
names(shap2_A_red3) <- c("bnr2","area", "perimeter", "radius.mean", "radius.sd", "radius.min",
"radius.max","cx","cy","alpha_arc")
nrow(shap2_A_red3)
y1 <- 1: nrow(shap2_A_red3)
obj_nrs <- matrix(nrow = nrow(shap2_A_red3), ncol=2) #table
colnames(obj_nrs) <- c("bnr","bnr2")
names(shap1_A) <- c("bnr","area", "perimeter", "radius.mean", "radius.sd", "radius.min",
"radius.max","cx","cy","alpha_arc")
nrow(shap1_A)
vec <- 1 : nrow(shap1_A)
for (i in y1) {
for (k in vec) {
if (shap1_A$area[k] == shap2_A_red3$area[i] ) {
obj_nrs[i,1] <- shap1_A$bnr[k]
obj_nrs[i,2] <- shap2_A_red3$bnr2[i]
} # end if
} #end for k
} #end for i
obj_nrs #list with bnr/bnr2 to be used in conversion bnr2<-bnr (and vice versa)
##find 'bnr' by 'bnr2'
cat("bnr2= ", bnr2,"\n")
for (i in y1) {
if (obj_nrs[i,2] == bnr2) {
bnr <- obj_nrs[[i,1]]
} #end if
} #end for-loop
cat("bnr= ", bnr,"\n")
##label of building after first labeling (bnr)
is_bnr <- LCM_label@.Data == bnr
display(is_bnr)
display(is_bnr,"raster")
#conversion to a vector
coords <- data.frame(x=as.numeric(row(is_bnr)),y=as.numeric(col(is_bnr)), is_bnr=as.numeric(is_bnr))
coords <- coords[coords$is_bnr == 1,] #removal of pixels which do not have the label of the building
##plot of PC and checkpoints
r_max2 <- round(1.1*r_max)
plot(coords$x, coords$y, pch=16, cex=0.2,col="black",asp=1,xlim=c(xc-r_max2,xc+r_max2),ylim=c(yc+r_max2, yc-r_max2), xlab = NULL, ylab=NULL, ann= FALSE, main=paste("b", bnr2), axes=TRUE)
#plot(coords$x, coords$y,pch=16,cex=0.2,col="black",asp=1,xlim=c(1,1887),ylim=c(2557,1), xlab = NULL, ylab=NULL, ann= FALSE, main=paste("b", bnr2), axes=TRUE) #small scale
points(xc+r_max, yc+r_max, pch=16, cex=1.5, col="black", asp=1) #point for scaling
points(xc-r_max, yc+r_max, pch=16, cex=1.5, col="black", asp=1) #point for scaling
points(xc-r_max, yc-r_max, pch=16, cex=1.5, col="black", asp=1) #point for scaling
points(xc+r_max, yc-r_max, pch=16, cex=1.5, col="black", asp=1) #point for scaling
points(xc, yc, pch = 3, cex=1.5, col = "red", asp=1) #centre of PC
##output as image
file1 <-  paste('./data/',Img_name,'/images/b',bnr2,'_new8.tif',sep = "")
tiff(file1, width=578, height=578, units="px", bg = "white")
r_max2 <- round(1.1*r_max)
plot(coords$x, coords$y, pch=16, cex=0.2,col="black",asp=1,xlim=c(xc-r_max2,xc+r_max2),ylim=c(yc+r_max2, yc-r_max2), xlab = NULL, ylab=NULL, ann= FALSE, main=paste("b", bnr2), axes=TRUE)
points(xc, yc, pch = 16, cex=1.5, col = "black", asp=1) #centre of PC
points(xc+r_max, yc+r_max, pch=16, cex=1.5, col="black", asp=1) #point for scaling
points(xc-r_max, yc+r_max, pch=16, cex=1.5, col="black", asp=1) #point for scaling
points(xc-r_max, yc-r_max, pch=16, cex=1.5, col="black", asp=1) #point for scaling
points(xc+r_max, yc-r_max, pch=16, cex=1.5, col="black", asp=1) #point for scaling
dev.off()
##dy-range of window (required for scale factor in program 'sequence_of_lines.R')
ylim <- c(yc+r_max2, yc-r_max2)
ylim[1] - ylim[2]
##calculation of window size
par("usr")
dy_window_plot <- abs(par("usr")[3] - par("usr")[4]) #range of window
##output plot parameter
setwd(home_dir)
plotPar[5] <- dy_window_plot
plorPar_orig <- plotPar
f1 <- paste("./data/",Img_name,"/param_b_",bnr2,".txt",sep="")
write.table(plotPar,file=f1)
f2 <- paste("./data/",Img_name,"/param_b_",bnr2,sep="")
save(plotPar, file=f2) #parameter xc, yc, r_max, alpha, dy_window_plot
#input image
f1 = paste('./data/',Img_name,'/images/b',bnr2,'_new8.tif',sep = "")
b_new8 <- readImage(f1)
display(b_new8, method="raster")
##partition of object?
cat("partition of object? - no parts: 0, two parts: 1 (first object) or 2 (second object)","\n")
k_part <- readline("select part, type 0, 1 or 2: ") #when object must be parted
if (k_part == "0") { #no partition of object
part <- "no_part"
}
if (k_part == "1") { #first part
part <- "2parts_1"
}
if (k_part == "2") { #second part
part <- "2parts_2"
#n_y_auto <- n_y_auto + 1
}
if (part == "2parts_1" || part == "2parts_2") {
bnr2_part <- bnr2
bnr2 <- as.numeric(substr(bnr2,1,2))
bnr2_orig <- bnr2
p_pos <- "cor_sep"
}
if(part != "no_part" && p_pos == "cor_sep") {
setwd(home_dir2)
source(paste("spObj_extract_single_building_v",v_nr,".R",sep="")) #special object
}
paste("./data/ISPRS7/idxy_LCM_b",bnr2,".csv", sep="")
bnr2=27
paste("./data/ISPRS7/idxy_LCM_b",bnr2,".csv", sep="")
Img_name="ISPRS7"
fname2 <- paste("./data/",Img_name,"/idxy_LCM_b",bnr2,".csv", sep="")
fname2
fname2 <- paste("./data/ISPRS7/idxy_LCM_b",bnr2,".csv", sep="") #image7
fname2
#fname2 <- paste("./data/ISPRS7/idxy_LCM_b",bnr2,".csv", sep="") #image7
fname2 <- paste("./data/",Img_name,"/idxy_LCM_b",bnr2,".csv", sep="")
fname2
#fname2 <- paste("./data/ISPRS7/idxy_LCM_b",bnr2,".csv", sep="") #image7
fname2 <- paste("./data/",Img_name,"/idxy_LCM_b",bnr2,".csv", sep="")
fname2
#fname2 <- paste("./data/ISPRS7/idxy_LCM_b",bnr2,".csv", sep="") #image7
fname2 <- paste("./data/",Img_name,"/idxy_LCM_b",bnr2,".csv", sep="")
fname2
fname2 <- paste("./data/",Img_name,"/idxy_LCM_ISPRS7_b",bnr2,".csv", sep="")
fname2
fname2 <- paste("./data/",Img_name,"/idxy_LCM_b",bnr2,".csv", sep="")
fname2
cat("type N","\n")
cat("if demo: type N for ISPRS7) or Y for ISPRS1)","\n")
cat("if demo: type N for ISPRS7 or Y for ISPRS1","\n")
cat("if demo: type N (ISPRS7) or Y (ISPRS1)","\n")
mean_line <- function(ln_num) {
i <- ln_num #number of PC
x <- mean(all_PC[[i]]$x)
y <- mean(all_PC[[i]]$y)
points(x,-y,pch=20,asp=1,cex=2,col="red") #plot
nr_P <- PC_nr[i]
angle_center_corner <- det_of_angle(x,y) #determination of angle
par_midp <<- list(nr_P,angle_center_corner,x,y)
return(par_midp)
} #end of function
mean_line <- function(ln_num) {
i <- ln_num #number of PC
x <- mean(all_PC[[i]]$x)
y <- mean(all_PC[[i]]$y)
points(x,-y,pch=20,asp=1,cex=2,col="red") #plot
nr_P <- PC_nr[i]
angle_center_corner <- det_of_angle(x,y) #determination of angle
par_midp <<- list(nr_P,angle_center_corner,x,y)
return(par_midp)
} #end of function
.libPaths()
.libPaths("trans_ortho")
.libPaths(trans_ortho)
.libPaths()
.libPaths()
.libPaths()
getwd()
par("mai") #margins in inches
par("usr") #users plotting region (default: x1=0, x2=1, y1=0, y2=1)
## selection of line as reference line (ref-line for orientation/angle)
# consider manual determination of ref-line (see: support_line_detection.R)
lnr <- readline("type reference line number - if demo - type 1: ")
lnr
lnr <- as.integer(lnr)
Img_name
Img_name="ISPRS1"
paste("./data/",Img_name,"/images/LCM_cart_enh_b3_scaled_2.jpg",sep="")
#LCM_enh_b=readImage("./data/ISPRS7/images/LCM_cart_enh_b3_scaled_2.jpg") #classification by method JH, scaled affine
LCM_enh_b=readImage(paste("./data/",Img_name,"/images/LCM_cart_enh_b3_scaled_2.jpg",sep="")) #classification by method JH, scaled affine
paste("./data/",Img_name,"/H_par", sep="", collapse=NULL)
Img_name="ISPRS1"
paste("./data/",Img_name,"/H_par", sep="", collapse=NULL)
paste("./data/",Img_name,"/th_ref_",bnr2,sep="")
Img_name ="ISPRS1"
paste("./data/",Img_name,"/th_ref_",bnr2,sep="")
bnr2=18
paste("./data/",Img_name,"/th_ref_",bnr2,sep="")
f2 <- paste("./data/",Img_name,"/th_ref_",bnr2,sep="")
load(f2) #main direction
theta_ref #approximate value
source("~/GitHub/buildenh/R/startup_buildenh_v1.1.R")
setwd("C:/Users/Joachim/R_programs/buildenh_jh/clone1")
##start the next program ("enhance_image.R")
setwd(home_dir2)
3086*0.09
sqrt(277.74)
sqrt(3086)
55.55*0.09
3086*(0.09^2)
3086*0.09^2
25/0.09^2
citation("EBImage"))
citation("EBImage")
setwd("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R")
