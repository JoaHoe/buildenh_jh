for (n in vec2) {
if (b13_angle_df3$nr_center[n] == b13_angle_df2$nr_center) {
b13_angle_df2[n,2:4] <- b13_angle_df2[i,2:4]
}
i <- i + 1
}
i=1
for (n in vec2) {
if (b13_angle_df3$nr_center[n] == b13_angle_df2$nr_center[i]) {
b13_angle_df2[n,2:4] <- b13_angle_df2[i,2:4]
}
i <- i + 1
}
b13_angle_df3
i=1
for (n in vec2) {
while (i <= 10) {
if (b13_angle_df3$nr_center[n] == b13_angle_df2$nr_center[i]) {
b13_angle_df2[n,2:4] <- b13_angle_df2[i,2:4]
}
i <- i + 1
}
}
b13_angle_df3
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
i=1
for (n in vec2) {
while (i <= 10) {
if (b13_angle_df3$nr_center[n] == b13_angle_df2$nr_center[i]) {
b13_angle_df2[n,2:4] <- b13_angle_df2[i,2:4]
}
i <- i + 1
}
}
b13_angle_df3
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
i=1
for (n in vec2) {
while (i <= 10) {
if (b13_angle_df3$nr_center[n] == b13_angle_df2$nr_center[i]) {
b13_angle_df3[n,2:4] <- b13_angle_df2[i,2:4]
}
i <- i + 1
}
}
b13_angle_df3
b13_angle_df2
n
n
vec2
b13_angle_df2
cat("n= ", n, "\n")
i=1
for (n in vec2) {
while (i <= 10) {
cat("n= ", n, "\n")
if (b13_angle_df3$nr_center[n] == b13_angle_df2$nr_center[i]) {
b13_angle_df3[n,2:4] <- b13_angle_df2[i,2:4]
}
i <- i + 1
}
}
vec2 <- 1 : length(sequence_seg)
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
i=1
for (n in vec2) {
while (i <= 10) {
cat("n= ", n, "\n")
if (b13_angle_df3$nr_center[i] == b13_angle_df2$nr_center[n]) {
b13_angle_df3[n,2:4] <- b13_angle_df2[i,2:4]
}
i <- i + 1
}
}
b13_angle_df3
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
i=1
for (n in vec2) {
while (i <= 10) {
cat("n= ", n, "\n")
if (b13_angle_df3$nr_center[i] == b13_angle_df2$nr_center[n]) {
b13_angle_df3[n,2:4] <- b13_angle_df2[i,2:4]
}
i <- i + 1
}
}
b13_angle_df3
vec2
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
vec2
i=1
for (n in vec2) {
while (i <= 10) {
cat("n= ", n, "\n")
if (b13_angle_df3$nr_center[i] == b13_angle_df2$nr_center[n]) {
b13_angle_df3[i,2:4] <- b13_angle_df2[n,2:4]
}
i <- i + 1
}
}
b13_angle_df3
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
vec2
i=1
for (n in vec2) {
while (i <= 10) {
cat("n= ", n, "i= ", i, "\n")
if (b13_angle_df3$nr_center[i] == b13_angle_df2$nr_center[n]) {
b13_angle_df3[i,2:4] <- b13_angle_df2[n,2:4]
}
i <- i+1
}
}
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
vec2
i=1
for (n1 in vec2) {
while (i <= 10) {
cat("n1= ", n1, "i= ", i, "\n")
if (b13_angle_df3$nr_center[i] == b13_angle_df2$nr_center[n1]) {
b13_angle_df3[i,2:4] <- b13_angle_df2[n1,2:4]
}
i <- i+1
}
}
b13_angle_df3
vec2
i=1
b13_angle_df2
b13_angle_df3
b13_angle_df2
b13_angle_df2$nr_center
b13_angle_df3$nr_center
b13_angle_df3$nr_center[i] == b13_angle_df2$nr_center[n1]
i
n1
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
vec2
i=1
n1=1
for (n1 in vec2) {
while (i <= 10) {
cat("n1= ", n1, "i= ", i, "\n")
if (b13_angle_df3$nr_center[i] == b13_angle_df2$nr_center[n1]) {
b13_angle_df3[i,2:4] <- b13_angle_df2[n1,2:4]
}
i <- i+1
}
}
b13_angle_df3
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
vec2
i=1
for (n1 in vec2) {
while (i <= 10) {
cat("n1= ", n1, "i= ", i, "\n")
if (b13_angle_df3$nr_center[n1] == b13_angle_df2$nr_center[i]) {
b13_angle_df3[n1,2:4] <- b13_angle_df2[i,2:4]
}
i <- i+1
}
}
b13_angle_df3
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
vec2
i=1
for (n1 in vec2) {
while (i <= 10) {
cat("n1= ", n1, "i= ", i, "\n")
if (b13_angle_df3[n1,1] == b13_angle_df2[i,1]) {
b13_angle_df3[n1,2:4] <- b13_angle_df2[i,2:4]
}
i <- i+1
}
}
b13_angle_df3
for (n1 in vec2) {
cat("n1= ", n1, "\n")
}
i=1
for (n1 in vec2) {
while (i <= 10) {
cat("n1= ", n1, "i= ", i, "\n")
# if (b13_angle_df3[n1,1] == b13_angle_df2[i,1]) {
#    b13_angle_df3[n1,2:4] <- b13_angle_df2[i,2:4]
#  }
}
i <- i+1
}
vec2
i=1
for (n1 in vec2) {
while (i <= 10) {
cat("n1= ", n1, "i= ", i, "\n")
# if (b13_angle_df3[n1,1] == b13_angle_df2[i,1]) {
#    b13_angle_df3[n1,2:4] <- b13_angle_df2[i,2:4]
#  }
i <- i+1
}
}
for (n1 in vec2) {
i=1
while (i <= 10) {
cat("n1= ", n1, "i= ", i, "\n")
# if (b13_angle_df3[n1,1] == b13_angle_df2[i,1]) {
#    b13_angle_df3[n1,2:4] <- b13_angle_df2[i,2:4]
#  }
i <- i+1
}
}
vec2
for (n1 in vec2) {
i=1
while (i <= 10) {
cat("n1= ", n1, "i= ", i, "\n")
if (b13_angle_df3[n1,1] == b13_angle_df2[i,1]) {
b13_angle_df3[n1,2:4] <- b13_angle_df2[i,2:4]
}
i <- i+1
}
}
b13_angle_df3
#
plot(xc,-yc, pch=3, cex=2, col="blue", asp=1, xlim=c(xc - r_max2,xc + r_max2), ylim=c(-(yc + r_max2),-(yc - r_max2)),
main=paste("b ",bnr2, sep=(""))) #large scale
points(pc3$col, -pc3$row, pch=20, asp=1, cex=0.3, col="black") # original pixel cloud for building
points(b13_angle_df2$x_centre,-b13_angle_df2$y_centre, asp=1, pch=20,col="green", cex=1.5)
#
plot(xc,-yc, pch=3, cex=2, col="blue", asp=1, xlim=c(xc - r_max2,xc + r_max2), ylim=c(-(yc + r_max2),-(yc - r_max2)),
main=paste("b ",bnr2, sep=(""))) #large scale
points(pc3$col, -pc3$row, pch=20, asp=1, cex=0.3, col="black") # original pixel cloud for building
points(b13_angle_df3$x_centre,-b13_angle_df3$y_centre, asp=1, pch=20,col="blue", cex=1.5)
points(b13_angle_df2$x_centre,-b13_angle_df2$y_centre, asp=1, pch=20,col="blue", cex=1.5)
points(b13_angle_df2$x_centre,-b13_angle_df2$y_centre, asp=1, pch=20,col="red", cex=1.5)
points(b13_angle_df3$x_centre,-b13_angle_df3$y_centre, asp=1, pch=20,col="blue", cex=1.5)
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
vec2
for (n1 in vec2) {
i=1
while (i <= 10) {
cat("n1= ", n1, "i= ", i, "\n")
if (b13_angle_df3[n1,1] == b13_angle_df2[i,1]) {
b13_angle_df3[n1,2:4] <- b13_angle_df2[i,2:4]
}
i <- i+1
}
}
b13_angle_df3
#
plot(xc,-yc, pch=3, cex=2, col="blue", asp=1, xlim=c(xc - r_max2,xc + r_max2), ylim=c(-(yc + r_max2),-(yc - r_max2)),
main=paste("b ",bnr2, sep=(""))) #large scale
points(pc3$col, -pc3$row, pch=20, asp=1, cex=0.3, col="black") # original pixel cloud for building
points(b13_angle_df3$x_centre,-b13_angle_df3$y_centre, asp=1, pch=20,col="blue", cex=1.5)
points(b13_angle_df2$x_centre,-b13_angle_df2$y_centre, asp=1, pch=20,col="red", cex=1.5)
sequence_seg
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/sequence_of_lines_v1.1.R")
#
plot(xc,-yc, pch=3, cex=2, col="blue", asp=1, xlim=c(xc - r_max2,xc + r_max2), ylim=c(-(yc + r_max2),-(yc - r_max2)),
main=paste("b ",bnr2, sep=(""))) #large scale
points(pc3$col, -pc3$row, pch=20, asp=1, cex=0.3, col="black") # original pixel cloud for building
points(b13_angle_df3$x_centre,-b13_angle_df3$y_centre, asp=1, pch=20,col="blue", cex=1.5)
points(b13_angle_df2$x_centre,-b13_angle_df2$y_centre, asp=1, pch=20,col="red", cex=1.5)
for (n1 in vec2) {
points(b13_angle_df3$x_centre[n1],-b13_angle_df3$y_centre[n1], asp=1, pch=20,col="blue", cex=1.5)
}
for (n1 in vec2) {
browser()
points(b13_angle_df3$x_centre[n1],-b13_angle_df3$y_centre[n1], asp=1, pch=20,col="blue", cex=1.5)
}
for (n1 in vec2) {
browser()
points(b13_angle_df3$x_centre[n1],-b13_angle_df3$y_centre[n1], asp=1, pch=20,col="green", cex=1.5)
}
points(b13_angle_df3$x_centre,-b13_angle_df3$y_centre, asp=1, pch=20,col="blue", cex=1.5)
sequence_seg
#checking
n_det5 <- length(lnr_det5)
if (n_seq != n_det5) {
stop("lines are not correctly detected -> correct positions by 'support_line_detection.R'")
cat("lines are not correctly detected -> correct sequence manually","\n")
p_pos <- "cor_sek" #correction of sequence
setwd(home_dir2)
source(paste("spObj_sequence_of_lines_v",v_nr,".R",sep=""))
sequence_seg2
} else {
cat ("sequence = ",sequence_seg, "\n")
} #end if-else
#plot of line sequence
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
vec2
for (n1 in vec2) {
i=1
while (i <= 10) {
if (b13_angle_df3[n1,1] == b13_angle_df2[i,1]) {
b13_angle_df3[n1,2:4] <- b13_angle_df2[i,2:4]
}
i <- i+1
}
}
b13_angle_df3
#
plot(xc,-yc, pch=3, cex=2, col="blue", asp=1, xlim=c(xc - r_max2,xc + r_max2), ylim=c(-(yc + r_max2),-(yc - r_max2)),
main=paste("b ",bnr2, sep=(""))) #large scale
points(pc3$col, -pc3$row, pch=20, asp=1, cex=0.3, col="black") # original pixel cloud for building
for (n1 in vec2) {
browser()
points(b13_angle_df3$x_centre[n1],-b13_angle_df3$y_centre[n1], asp=1, pch=20,col="green", cex=1.5)
}
b13_angle_df3
points(b13_angle_df3$x_centre,-b13_angle_df3$y_centre, asp=1, pch=20,col="blue", cex=1.5)
#plot of line sequence
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
vec2
for (n1 in vec2) {
i=1
while (i <= 10) {
if (b13_angle_df3[n1,1] == b13_angle_df2[i,1]) {
b13_angle_df3[n1,2:4] <- b13_angle_df2[i,2:4]
}
i <- i+1
}
}
b13_angle_df3
#
plob13_angle_df3t(xc,-yc, pch=3, cex=2, col="blue", asp=1, xlim=c(xc - r_max2,xc + r_max2), ylim=c(-(yc + r_max2),-(yc - r_max2)),
main=paste("b ",bnr2, sep=(""))) #large scale
points(pc3$col, -pc3$row, pch=20, asp=1, cex=0.3, col="black") # original pixel cloud for building
#
plot(xc,-yc, pch=3, cex=2, col="blue", asp=1, xlim=c(xc - r_max2,xc + r_max2), ylim=c(-(yc + r_max2),-(yc - r_max2)),
main=paste("b ",bnr2, sep=(""))) #large scale
points(pc3$col, -pc3$row, pch=20, asp=1, cex=0.3, col="black") # original pixel cloud for building
for (n1 in vec2) {
browser()
points(b13_angle_df3$x_centre[n1],-b13_angle_df3$y_centre[n1], asp=1, pch=20,col="green", cex=1.5)
}
points(b13_angle_df3$x_centre,-b13_angle_df3$y_centre, asp=1, pch=20,col="blue", cex=1.5)
#checking
n_det5 <- length(lnr_det5)
if (n_seq != n_det5) {
stop("lines are not correctly detected -> correct positions by 'support_line_detection.R'")
cat("lines are not correctly detected -> correct sequence manually","\n")
p_pos <- "cor_sek" #correction of sequence
setwd(home_dir2)
source(paste("spObj_sequence_of_lines_v",v_nr,".R",sep=""))
sequence_seg2
} else {
cat ("sequence = ",sequence_seg, "\n")
} #end if-else
#plot of line sequence
b13_angle_df3 <- b13_angle_df2
b13_angle_df3[,] <- 0
sequence_seg
vec2 <- 1 : length(sequence_seg)
b13_angle_df3$nr_center <- sequence_seg
b13_angle_df3
vec2
for (n1 in vec2) {
i=1
while (i <= 10) {
if (b13_angle_df3[n1,1] == b13_angle_df2[i,1]) {
b13_angle_df3[n1,2:4] <- b13_angle_df2[i,2:4]
}
i <- i+1
}
}
b13_angle_df3
#
plot(xc,-yc, pch=3, cex=2, col="blue", asp=1, xlim=c(xc - r_max2,xc + r_max2), ylim=c(-(yc + r_max2),-(yc - r_max2)),
main=paste("b ",bnr2, sep=(""))) #large scale
points(pc3$col, -pc3$row, pch=20, asp=1, cex=0.3, col="black") # original pixel cloud for building
for (n1 in vec2) {
browser()
points(b13_angle_df3$x_centre[n1],-b13_angle_df3$y_centre[n1], asp=1, pch=20,col="green", cex=1.5)
}
points(b13_angle_df3$x_centre,-b13_angle_df3$y_centre, asp=1, pch=20,col="blue", cex=1.5)
cat("is the sequence of lines correct?","\n")
cat("if demo -> type Y")
b13_angle_df2
#b18 (demo)
if (bnr2 == 18 && p_pos == "cor_pos") {
b13_angle_df[6,3:4] <- c(953.2,921.5)
b13_angle_df[8,3:4] <- c(1017,1084)
b13_angle_df[9,3:4] <- c(1131.6,1044.1)
b13_angle_df[10,3:4] <- c(789.8,1144.4)
b13_angle_df2 <- b13_angle_df
} #end of b18
b13_angle_df2
sequence_seg2
cat("n1= ",n1,"i= ",i,"j= ", j,"\n")
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/startup_buildenh_v1.1.R")
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/startup_buildenh_v1.1.R")
##name of program: startup_buildenh.R
#description: program(script) starts the package 'buildenh'
v_nr = "1.1" #version number of the program pckage
cat("version_number= ",v_nr,"\n")
#instructions: input project title and image name
#instructions: save your home directory
#instructions: select project title
#instructions: select orthoimage: ISPRS1 or ISPRS7
#instructions: type 'Ctrl+A'(select all) and 'Source'
#instructions: new users may start by examples (processing mode = demo)
#depends: R-4.2.1
#Copyright(C) 2022 Joachim Höhle
#GNU General Public License (GPL)
###################################################################################
cat("start of software package 'buildenh_jh' ","\n")
cat("first program/script 'startup_buildenh.R' ","\n")
#save your home directory
old_dir <- setwd("./")
getwd()
#
home_dir <- "C:/Users/Joachim/R_programs/buildenh_jh/clone1"
home_dir2 <- "C:/Users/Joachim/R_programs/buildenh_jh/clone1/R"
prj_title <- "ISPRS7_LCM1"
cat("project title is = ", prj_title,"\n")
setwd(home_dir)
#select orthoimage (activate manually)
Img_name <- "ISPRS7" #name of orthoimage to be processed, change for other image
if (Img_name == "ISPRS7") {
##setting of path- & file-name for original data:
OrgClassResFilename <- "ISPRS_#7_b.tiff" #extracted buildings
OrgClassResPathname <- paste(home_dir,"/data",sep = "")
OrgImgPathname <- paste(home_dir,"/data",sep = "")
OrgImgFilename <- "top_mosaic_09cm_area7.tif"  #GSD=0.09m
OrgGtsPathname <- paste(home_dir,"/data",sep = "")
OrgGtsFilename <- "gts_top_mosaic_09cm_area7.tif" #GSD=0.09m
#GSD=Ground Sampling Distance
} #end of image7
if (Img_name == "ISPRS1") {
##setting of path- & file-name for original data:
setwd(home_dir)
OrgClassResPathname <- paste(home_dir,"/data",sep = "")
OrgClassResFilename <- "ISPRS_#1_b.tiff" #extracted buildings
OrgImgPathname <- paste(home_dir,"/data",sep = "")
OrgImgFilename <- "top_mosaic_09cm_area1.tif" #GSD=0.09m
OrgGtsPathname <- paste(home_dir,"/data",sep = "")
OrgGtsFilename <- "gts_top_mosaic_09cm_area1.tif" #GSD=0.09m
#GSD=Ground Sampling Distance
} #end of image1
proc_mode <- "NA" #mode of processing
##loading of libraries
setwd(home_dir2)
source("func_loadLib_op.R") #load of other R-packages, v1.1
source("func_loadLib_jh.R") #load of functions for the R-package 'buildenh', v1.1
#
loadLib_op() #call of function
loadLib_jh() #call of function
