cat("theta_ref = ",theta_ref, "\n")
k14 <- length(B5_4$lnr)
B5_4b <- B5_4
B5_4b[,1:7] <- 0
B5_4b[1,] <- B5_4[1,]
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/func_rectang_lines.R")
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/line_detection_v1.1.R")
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/startup_buildenh_v1.1.R")
cat("define minimum size of line segment: 15 pixel (recommended) or 35 (alternativ)","\n")
n_pix <- readline("type minimm size of line - if demo - type 35: ") #manual input
n_pix <- as.integer(n_pix)
wd <- n_pix
thr <- 10 #default value for difference in ro
cat("n_pix=",n_pix,"pixels","\n")
cat("thr=",thr,"pixels","\n")
B5_6 <- line_reduce() #call of function
B5_6 <- line_reduce() #call of function
#browser()
B5_4
k14 <- length(B5_4$lnr)
B5_4
n_pix
#alternative selections:
#wd=15 #  15*0.09 = 1.4m (search for small lines)
#wd=56 #  56*0.09 = 5m (search for long lines)
cat("smallest line segment within outline of building=", n_pix,"\n")
B5_4b <- B5_4
B5_4b[,1:7] <- 0
B5_4b[1,] <- B5_4[1,]
#
i=1
k1=2
while (i < k14) {
i=i+1
if (B5_4$theta_angle[i] == theta_ref && B5_4$n_pixel[i] >= n_pix ||
B5_4$theta_angle[i] == alph_ref && B5_4$n_pixel[i] >= n_pix) {
B5_4b[k1,] <- B5_4[i,]
k1 <- k1+1
} #end if
} #end loop
B5_4b
B5_4c <- subset(B5_4b, B5_4b$lnr > 0)
B5_4c # matrix with lines longer than 'n_pix'
k15 <- length(B5_4c$lnr)
## Search of lines with theta_ref
vec <- 1:k15
B5_4d <- B5_4c
B5_4d[,1:7] <- 0
#loop
j=1
for (i in vec) {
if (B5_4c$theta_angle[i] == theta_ref) {
B5_4d[j,] <- B5_4c[i,]
j=j+1
} #end if
} # end for-loop
B5_4d <- subset(B5_4d,B5_4d$n_pixel >= n_pix)
B5_long_lines <- B5_4d[1:2,]
B5_4d_ord <- B5_4d[order(B5_4d[,6],decreasing=FALSE),]
B5_4d_ord2 <- subset(B5_4d_ord,B5_4d_ord$n_pixel >= n_pix)
B5_4d_ord <- B5_4d_ord2
B5_4d_ord
B5_4d_ord[,8] <- 0
names(B5_4d_ord)[8] <- "dif_ro_pixel"
B5_4d_ord_red <- subset(B5_4d_ord, B5_4d_ord$n_pixel >= n_pix)
k6<-nrow(B5_4d_ord_red)
rownames(B5_4d_ord_red) <- 1:k6
B5_4d_ord_red
B5_4d_ord_red[,9:10] <- 0
names(B5_4d_ord_red)[9] <- "shorter_line"
names(B5_4d_ord_red)[10] <- "remove_row_nr"
B5_4d_ord_red
k5 <- nrow(B5_4d_ord_red)
vec5 <- 1:(k5-1)
#
for (n in vec5) {
B5_4d_ord_red$dif_ro_pixel[n] <- B5_4d_ord_red$ro_pixel[n+1] - B5_4d_ord_red$ro_pixel[n]
B5_4d_ord_red$shorter_line[n] <- min(B5_4d_ord_red$n_pixel[n],B5_4d_ord_red$n_pixel[(n+1)])
} # end for-loop
B5_4d_ord_red
#
for (n in vec5) {
if(B5_4d_ord_red$dif_ro_pixel[n] <= thr && B5_4d_ord_red$n_pixel[n] == B5_4d_ord_red$shorter_line[n]) {
B5_4d_ord_red$remove_row_nr[n] <- n
} #end if
if(B5_4d_ord_red$dif_ro_pixel[n] <= thr && B5_4d_ord_red$n_pixel[n+1] == B5_4d_ord_red$shorter_line[n]) {
B5_4d_ord_red$remove_row_nr[n+1] <- n+1
} #end if
} # end for-loop
B5_4d_ord_red
B5_4d_ord_red$remove_row_nr
k7 <- nrow(B5_4d_ord_red)
vec6 = 1:k7
rem_vec <- rep(0,k7)
for (n in vec6) {
if(B5_4d_ord_red$remove_row_nr[n] > 0) {
rem_vec[n] <- B5_4d_ord_red$remove_row_nr[n]
}
} # end for-loop
#
rem_vec2 <- NULL
j = 1
for (n in vec6) {
if(rem_vec[n] == 0) {next} else {
rem_vec2[j] <- rem_vec[n]
j=j+1
}
} #end for-loop
le3 <- length(rem_vec2)
if (le3 == 0) {
B5_4d_ord_final <- B5_4d_ord_red  #solution
} else {
# correction of matrix with rem_vec
B5_4d_ord_red2 <- B5_4d_ord_red[-rem_vec2,]
B5_4d_ord_red2
k8 <- nrow(B5_4d_ord_red2)
rownames(B5_4d_ord_red2) <- 1:k8
} #end if-else
B5_4d_ord_red2
#
if (k8 < 2) {
cat("error: number of lines is < 2","\n")
}
if (k8 == 2) {
B5_4d_ord_final <- B5_4d_ord_red2 #solution
} #else {
if (k8 > 2) {
B5_4d_ord_red3 <- B5_4d_ord_red2 #new round
B5_4d_ord_red3[,8:10] <- 0
vec7 <- 1:(k8-1)
for (n in vec7) {
B5_4d_ord_red3$dif_ro_pixel[n] <- (B5_4d_ord_red3$ro_pixel[n+1]- B5_4d_ord_red3$ro_pixel[n])
B5_4d_ord_red3$shorter_line[n] <- min(B5_4d_ord_red3$n_pixel[n],B5_4d_ord_red3$n_pixel[(n+1)])
} #end for-loop
# select the longer line of two
for (n in vec7) { #condition 1 and 2
if (B5_4d_ord_red3$dif_ro_pixel[n] <= thr && B5_4d_ord_red3$n_pixel[n] == B5_4d_ord_red3$shorter_line[n]) {
B5_4d_ord_red3$remove_row_nr[n] <- n
} # end if1
if(B5_4d_ord_red3$dif_ro_pixel[n] <= thr && B5_4d_ord_red3$n_pixel[n+1] == B5_4d_ord_red3$shorter_line[n]) {
B5_4d_ord_red3$remove_row_nr[n+1] <- n+1
} # end if2
} # end for-loop
k9 <- nrow(B5_4d_ord_red3)
vec9 <- 1:k9
rem_vec <- rep(0,k9)
for (n in vec9) {
if (B5_4d_ord_red3$remove_row_nr[n] > 0) { #if3
rem_vec[n] <- B5_4d_ord_red3$remove_row_nr[n]
cat("rem_vec=", rem_vec[n], "\n")
} # end if3
} # end for-loop
#
rem_vec2 <- NULL
j = 1
for (n in vec9) {
if(rem_vec[n] == 0) {next} else {
rem_vec2[j] <- rem_vec[n]
j=j+1
} #end if-else
} #end for-loop
if (sum(rem_vec) != 0) {
B5_4d_ord_red4 <- B5_4d_ord_red3[-rem_vec2,]
} else {
B5_4d_ord_red4 <- B5_4d_ord_red3
} #end if-else
k10 <- nrow(B5_4d_ord_red4)
if (k10 < 2) {
stop("error","\n")
}
if (k10 == 2) {
B5_4d_ord_final <- B5_4d_ord_red2 #solution
}
if (k10 > 2) { #last step
rownames(B5_4d_ord_red4) <- 1:k10
B5_4d_ord_red4[,8:10] <- 0
vec10 <- 1:(k10-1)
for (n in vec10) {
B5_4d_ord_red4$dif_ro_pixel[n] <- B5_4d_ord_red4$ro_pixel[n+1] - B5_4d_ord_red4$ro_pixel[n]
B5_4d_ord_red4$shorter_line[n] <- min(B5_4d_ord_red4$n_pixel[n], B5_4d_ord_red4$n_pixel[(n+1)])
} # end for-loop
} #end if last step
B5_4d_ord_red4
B5_4d_ord_red5 <- subset(B5_4d_ord_red4, n_pixel >= n_pix)
B5_4d_ord_final <- B5_4d_ord_red5
k11 <- nrow(B5_4d_ord_red5)
} #end if (k8 > 2)
#
B5_4d_ord_final
## Search of lines with alph_ref
n_pix2 <- n_pix
vec <- 1 : k15
B5_4dd <- B5_4c
B5_4dd[,1:7] <- 0
#loop
j = 1
for (i in vec){
if (B5_4c$theta_angle[i] == alph_ref) {
#cat("i=",i,"\n")
#print(B5_4[i,])
B5_4dd[j,] <- B5_4c[i,]
j = j + 1
} #end if
} #end for-loop
B5_4dd
B5_4dd <- subset(B5_4dd, B5_4dd$n_pixel >= n_pix2)
B5_long_lines[3:4,] <- B5_4dd[1:2,] # matrix for weighted mean of angle
B5_long_lines
min(B5_long_lines$n_pixel)
B5_4dd_ord <- B5_4dd[order(B5_4dd[,6],decreasing=FALSE),]
B5_4dd_ord
#n_pix2 <- min(B5_4dd_ord$n_pixel) #adapted to data
n_pix2 # select:15 or 35 or min(B5_4dd_ord$n_pixel)
B5_4dd_ord[,8] <- 0
names(B5_4dd_ord)[8] <- "dif_ro_pixel"
B5_4dd_ord_red <- B5_4dd_ord
#n_pix2 <- min(B5_4dd_ord$n_pixel) #adapted to data
n_pix2 # select:15 or 35 or min(B5_4dd_ord$n_pixel)
B5_4dd_ord[,8] <- 0
B5_4dd_ord
B5_4dd
## Search of lines with alph_ref
n_pix2 <- n_pix
vec <- 1 : k15
B5_4dd <- B5_4c
B5_4dd[,1:7] <- 0
#loop
j = 1
for (i in vec){
if (B5_4c$theta_angle[i] == alph_ref) {
#cat("i=",i,"\n")
#print(B5_4[i,])
B5_4dd[j,] <- B5_4c[i,]
j = j + 1
} #end if
} #end for-loop
B5_4dd
B5_4c
B5_4dd <- B5_4c
B5_4dd[,1:7] <- 0
B5_4dd
B5_4c
B5_4
B5_4b
cat("define minimum size of line segment: 15 pixel (recommended) or 35 (alternativ)","\n")
n_pix <- readline("type minimm size of line - if demo - type 35: ") #manual input
n_pix <- as.integer(n_pix)
wd <- n_pix
thr <- 10 #default value for difference in ro
cat("n_pix=",n_pix,"pixels","\n")
cat("thr=",thr,"pixels","\n")
B5_6 <- line_reduce() #call of function
B5_6
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/func_line_reduce.R")
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/func_line_reduce.R")
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/startup_buildenh_v1.1.R")
B5_6
#browser()
B5_4
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/func_line_reduce.R")
## generalizing, reduction of matrix, conversion to data frame
head(B5_2)
B5_2
k13 <- nrow(B4)
theta_ref <- B4$theta_angle[lnr_ref] #reference line
ro_ref <- B4$ro_pixel[lnr_ref]
theta_ref_ind <- B4$theta_index[lnr_ref] #changed
cat("theta_ref=",theta_ref,"degrees","\n")
setwd(home_dir)
f1 <- paste("./data/",Img_name,"/th_ref_",bnr2,sep="")
save(theta_ref, file=f1) #main direction
alph_ref <- theta_ref - 90
if (alph_ref < 0) { #alph_ref has to be positive
alph_ref <- alph_ref + 180
}
cat("alph_ref=", alph_ref,"degrees","\n")
theta_ref_ind <- B4$theta_index[lnr_ref] #changed
cat("theta_ref=",theta_ref,"degrees","\n")
setwd(home_dir)
f1 <- paste("./data/",Img_name,"/th_ref_",bnr2,sep="")
save(theta_ref, file=f1) #main direction
alph_ref <- theta_ref - 90
if (alph_ref < 0) { #alph_ref has to be positive
alph_ref <- alph_ref + 180
}
cat("alph_ref=", alph_ref,"degrees","\n")
alph_ref_ind <- alph_ref/theta_step + 1
alph_ref_arc <- alph_ref/omega
theta_ref_arc <- theta_ref/omega
r_max <- plotPar[3]
lol <- 10 # minimum length of line segment [pixels]
i=0
B5_2 <- matrix(nrow=k13,ncol=7)
B5_2[,1:7] <- 0
k1=1
#loop
while (i < k13) {
i <- i + 1
if (B4$theta_angle[i] == theta_ref && B4$n_pixel[i] >= lol || # lol = number of pixels (n_pixel))
B4$theta_angle[i] == alph_ref && B4$n_pixel[i] >= lol) {
B5_2[k1,] <- c(B4$lnr[i],B4$theta_index[i], B4$ro_index[i], B4$n[i], B4$theta_angle[i],B4$ro_pixel[i],B4$n_pixel[i])
k1 <- k1 + 1
}
} #end of loop while
## generalizing, reduction of matrix, conversion to data frame
head(B5_2)
B5_3 <- subset(B5_2,B5_2[,7] >= lol) # length of lines (lol) >= 15 pixels (=1.4 m) (n_pixel)
B5_3
B5_4 <- data.frame(B5_3)
names(B5_4) <- c("lnr", "theta_index", "ro_index", "n", "theta_angle","ro_pixel","n_pixel")
head(B5_4)
B5_4
B5_2
cat("alph_ref=", alph_ref,"degrees","\n")
alph_ref_ind <- alph_ref/theta_step + 1
alph_ref_arc <- alph_ref/omega
theta_ref_arc <- theta_ref/omega
r_max <- plotPar[3]
lol <- 10 # minimum length of line segment [pixels]
i=0
B5_2 <- matrix(nrow=k13,ncol=7)
B5_2[,1:7] <- 0
k1=1
#loop
while (i < k13) {
i <- i + 1
if (B4$theta_angle[i] == theta_ref && B4$n_pixel[i] >= lol ||
B4$theta_angle[i] == alph_ref && B4$n_pixel[i] >= lol) {
B5_2[k1,] <- c(B4$lnr[i],B4$theta_index[i], B4$ro_index[i], B4$n[i], B4$theta_angle[i],B4$ro_pixel[i],B4$n_pixel[i])
k1 <- k1 + 1
}
} #end of loop while
## generalizing, reduction of matrix, conversion to data frame
head(B5_2)
B5_3 <- subset(B5_2,B5_2[,7] >= lol) # length of lines (lol) >= 15 pixels (=1.4 m) (n_pixel)
B5_3
B4
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/line_detection_v1.1.R")
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/startup_buildenh_v1.1.R")
##plot of all buildings onto graph
setwd(home_dir)
x=0
y=0
plot(x,-y, pch=3, cex=1.3, cex.axis=1.3,cex.lab=1.3,col="red",
asp=1, xlim=c(1,img_x_max), ylim=c(-img_y_max,-1))
#input of file with all buildings
fname12 <- paste("./results/",Img_name,"/b_all.txt",sep="")
b_all <- read.table(fname12, header = FALSE)
b_all2 <- b_all
b_all2$V1 <- b_all$V1[order(b_all$V1, decreasing = FALSE)]
b_all2$V1
#remove multiple object-numbers
n8 <- 13 #max number of tests per object, subject of change
b_all_na <- rep(NA,n8)
b_all_lst <- list(b_all_na)
names(b_all_lst) <- "nr"
b_all_lst$nr[1] <- b_all2$V1[1]
b_all_lst$nr
n_nr <- length(b_all2$V1)
if (n_nr > 1) {
vec_nr <- 1 : (n_nr)
} else {
vec_nr <- 1
}
k <- 1
#loop
for (i in vec_nr) {
if (b_all2$V1[i] != b_all_lst$nr[k]) {
k = k+1
b_all_lst$nr[k] <- b_all2$V1[i]
} #end if
} #end loop
b_all_lst$nr
b_all_nr <- b_all_lst$nr[!is.na(b_all_lst$nr)]
b_all_nr
#output
fname13 <- paste("./results/",Img_name,"/b_all_nrs.txt",sep="")
write.table(b_all_nr,fname13)
#loop
for (i in b_all_nr)  {
bnr2 <- i
fname12 <- paste("./results/",Img_name,"/b",bnr2,"_coord_adj_plot.txt",sep="")
setwd(home_dir)
b <- read.table(fname12,header=T)
k1 <- nrow(b)
names(b) <- c("Points_x","Points_y")
cat("plot of building-outline","\n")
i <- 0
while(i < k1) {
i <- i+1
lines(b, col="black", asp=1, type="l", lwd=1, lty=1)
} #end while
} #end loop
##plot of all buildings onto graph
setwd(home_dir)
x=0
y=0
plot(x,-y, pch=3, cex=1.3, cex.axis=1.3,cex.lab=1.3,col="red",
asp=1, xlim=c(1,img_x_max), ylim=c(-img_y_max,-1))
##start the next program ("enhance_image.R")
setwd(home_dir2)
source(paste("enhance_image_v",v_nr,".R",sep=""))
##plot of all buildings onto graph
setwd(home_dir)
x=0
y=0
plot(x,-y, pch=3, cex=1.3, cex.axis=1.3,cex.lab=1.3,col="red",
asp=1, xlim=c(1,img_x_max), ylim=c(-img_y_max,-1))
#input of file with all buildings
fname12 <- paste("./results/",Img_name,"/b_all.txt",sep="")
b_all <- read.table(fname12, header = FALSE)
b_all2 <- b_all
b_all2$V1 <- b_all$V1[order(b_all$V1, decreasing = FALSE)]
b_all2$V1
#remove multiple object-numbers
n8 <- 13 #max number of tests per object, subject of change
b_all_na <- rep(NA,n8)
b_all_lst <- list(b_all_na)
names(b_all_lst) <- "nr"
b_all_lst$nr[1] <- b_all2$V1[1]
b_all_lst$nr
n_nr <- length(b_all2$V1)
if (n_nr > 1) {
vec_nr <- 1 : (n_nr)
} else {
vec_nr <- 1
}
k <- 1
#loop
for (i in vec_nr) {
if (b_all2$V1[i] != b_all_lst$nr[k]) {
k = k+1
b_all_lst$nr[k] <- b_all2$V1[i]
} #end if
} #end loop
b_all_lst$nr
b_all_nr <- b_all_lst$nr[!is.na(b_all_lst$nr)]
b_all_nr
#output
fname13 <- paste("./results/",Img_name,"/b_all_nrs.txt",sep="")
#loop
for (i in b_all_nr)  {
bnr2 <- i
fname12 <- paste("./results/",Img_name,"/b",bnr2,"_coord_adj_plot.txt",sep="")
setwd(home_dir)
b <- read.table(fname12,header=T)
k1 <- nrow(b)
names(b) <- c("Points_x","Points_y")
cat("plot of building-outline","\n")
i <- 0
while(i < k1) {
i <- i+1
lines(b, col="black", asp=1, type="l", lwd=1, lty=1)
} #end while
} #end loop
##plot of all processed buildings onto orthoimage
setwd(OrgImgPathname)
img_ref <- readImage(OrgImgFilename)
display(img_ref, method = "raster")
#loop
for (k in b_all_nr) {
cat("k=", k, "\n")
bnr2 <- k
fname12 <- paste("./results/",Img_name,"/b",bnr2,"_coord_adj_plot.txt",sep="")
setwd(home_dir)
b <- read.table(fname12, header=T)
b
k1 <- nrow(b)
names(b) <- c("Points_x","Points_y")
cat("plot of building-outline","\n")
i <- 0
while(i < k1) {
i <- i+1
lines(b$Points_x, -b$Points_y, col="white", asp=1,
type="l", lwd=3, lty=1)
} #end while
} #end loop
##plot of all processed buildings on ground truth (GT)
setwd(OrgGtsPathname)
img_GTS <- readImage(OrgGtsFilename)
display(img_GTS, method="raster")
b_all_nr
#loop
for (k in b_all_nr) {
cat("k=", k, "\n")
bnr2 <- k
fname12 <- paste("./results/",Img_name,"/b",bnr2,"_coord_adj_plot.txt",sep="")
setwd(home_dir)
b <- read.table(fname12, header=T)
b
k1 <- nrow(b)
names(b) <- c("Points_x","Points_y")
#loop
i <- 0
while(i < k1) {
i <- i+1
lines(b$Points_x, -b$Points_y, col="red", asp=1, type="l", lwd=3, lty=1)
} #end while
} #end loop
##plot of all buildings onto graph
setwd(home_dir)
#input of file with all buildings
fname12 <- paste("./results/",Img_name,"/b_all.txt",sep="")
b_all <- read.table(fname12, header = FALSE)
b_all2 <- b_all
b_all
fname12
b_all_lst
b_all_nr
#output
fname13 <- paste("./results/",Img_name,"/b_all_nrs.txt",sep="")
fname13
