theta_vec_red2 <- subset(theta_vec2, theta_vec2 > 0)
theta_vec_red2
n_theta_main2 <- length(theta_vec_red2)
#
ang2 <- theta_vec_red2
np_vec2_red <- subset(np_vec2, np_vec2 != 0)
len2 <- np_vec2_red
#
theta_average2 <- w_av(ang2,len2) #call of function
theta_av2 <- theta_average2
cat("theta_av2 = ",theta_average2, " degree", sep = "","\n") #second main direction
f <- paste("./data/",Img_name,"/theta_av2_b", bnr2,".txt",sep="")
write.table(theta_av2,file=f)
} #end if cas == "100_all+nonortho"
##output of weighted average of angle (theta_av)
setwd(home_dir)
f <- paste("./data/",Img_name,"/theta_av_b", bnr2,".txt",sep="")
write.table(theta_average,file=f)
theta_av <- theta_average
cat("weighted average of angle=",theta_av," degrees","\n")
if (theta_ref > 90) {
theta_av_mod <- theta_av + 90
alph_ref_mod <- theta_av_mod - 90
} else {
theta_av_mod <- theta_av
alph_ref_mod <- theta_av_mod + 90
} #end if-else
#test of theta_av_mod
theta_av_mod
dev_theta <- abs(theta_av_mod - theta_ref)
if (dev_theta > thr_theta_av) {
cat("theta_av deviates too much from theta_ref_adj:", dev_theta, "degree", "\n")
} #end if
## test for odd number of points
if (n_pts %% 2 == 1) {
cat("number of points is odd", "\n")
}
cat("end of program 'intersect_corner_points.R' - continue with program 'adjustment_of_corner_coordinates.R'","\n")
setwd(home_dir2)
source(paste("adjustment_of_corner_coordinates_v",v_nr,".R",sep=""))
#test of theta_av_mod
theta_av_mod
dev_theta <- abs(theta_av_mod - theta_ref)
if (dev_theta > thr_theta_av) {
cat("theta_av deviates too much from theta_ref_adj:", dev_theta, "degree", "\n")
} #end if
theta_av2
cat("theta_av2 = ",theta_average2, " degree", sep = "","\n") #second main direction
(70.015+71.741+72.741)/3
theta_vec_red2
theta_vec_red2
theta_vec2
theta_vec_red2 <- c(70.015,71.741,72.741)
#
ang2 <- theta_vec_red2
np_vec2_red <- subset(np_vec2, np_vec2 != 0)
len2 <- np_vec2_red
theta_average2 <- w_av(ang2,len2) #call of function
theta_av2 <- theta_average2
cat("theta_av2 = ",theta_average2, " degree", sep = "","\n") #second main direction
len2
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/intersect_corner_points_v1.1.R")
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/startup_buildenh_v1.1.R")
theta_vec_red
n_theta_main <- length(theta_vec_red)
vec <- 1 : n_theta_main
ang <- theta_vec_red
ang_mod <- ang
for (i in vec) {
if (ang_mod[i] > 90) {
ang_mod[i] <- (ang[i]-90)
}
} #end for-loop
ang_mod
np_vec_red <- subset(np_vec, np_vec > 0)
np_vec_red
len <- np_vec_red
#
theta_average <- w_av(ang_mod,len) #call of function
cat("theta_average= ",theta_average, "\n")
theta_av <- theta_average
##output of weighted average of angle
setwd(home_dir)
f <- paste("./data/",Img_name,"/theta_av_", bnr2,"_ref.txt",sep="")
ang_mod
B6_seq
#settings
options(digits = 10)
setwd(home_dir)
#ISPRS1_b36
ang1 <- c(79.9345,81.9270,171.2564-90) #theta angles (must be adopted)
len1 <- c(176,56,28) #length of lines
theta_average <- w_av(ang1,len1)
ang1 <- c(161.7411-90,70.0149,72.7405) #theta angles (must be adopted)
len1 <- c(176,56,28) #length of lines
theta_average2 <- w_av(ang1,len1)
B8S
f <- paste("./data/",Img_name,"/theta_av_b", bnr2,".txt",sep="")
f
f <- paste("./data/",Img_name,"/theta_av2_b", bnr2,".txt",sep="")
f
f <- paste("./data/",Img_name,"/theta_av_b", bnr2,".txt",sep="")
f
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/adjustment_of_corner_coordinates_v1.1.R")
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/startup_buildenh_v1.1.R")
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/startup_buildenh_v1.1.R")
answ
if (answ=="Y") {
p_pos == "cor_theta_av2"
setwd(home_dir2)
source(paste("spObj_intersect_corner_points_v",v_nr,".R",sep=""))
}
theta_av2_mod
bnr2
p_pos
answ <- readline("type Y or N: ")
answ <- readline("type Y or N: ")
if (answ=="Y") {
p_pos = "cor_theta_av2"
setwd(home_dir2)
source(paste("spObj_intersect_corner_points_v",v_nr,".R",sep=""))
}
theta_av2_mod
f <- paste("./data/",Img_name,"/theta_av2_b", bnr2,".txt",sep="")
write.table(theta_av2_mod,file=f)
##output of weighted average of angle (theta_av2)
setwd(home_dir)
f <- paste("./data/",Img_name,"/theta_av2_b", bnr2,".txt",sep="")
write.table(theta_av2_mod,file=f)
##output of weighted average of angle (theta_av)
#setwd(home_dir)
f <- paste("./data/",Img_name,"/theta_av_b", bnr2,".txt",sep="")
write.table(theta_average,file=f)
theta_av <- theta_average
cat("weighted average of angle=",theta_av," degrees","\n")
if (theta_ref > 90) {
theta_av_mod <- theta_av + 90
alph_ref_mod <- theta_av_mod - 90
} else {
theta_av_mod <- theta_av
alph_ref_mod <- theta_av_mod + 90
} #end if-else
#test of theta_av_mod
theta_av_mod
dev_theta <- abs(theta_av_mod - theta_ref)
if (dev_theta > thr_theta_av) {
cat("theta_av deviates too much from theta_ref_adj:", dev_theta, "degree", "\n")
} #end if
## test for odd number of points
if (n_pts %% 2 == 1) {
cat("number of points is odd", "\n")
}
cat("end of program 'intersect_corner_points.R' - continue with program 'adjustment_of_corner_coordinates.R'","\n")
setwd(home_dir2)
source(paste("adjustment_of_corner_coordinates_v",v_nr,".R",sep=""))
print(phi_deg)
B8
print(phi_deg)
soph
theta_av2_mod
theta_av2
B8
B8S <- B8
n_B8S <- length(B8S)
z <- 1 : n_B8S
n_B8S <- nrow(B8S)
z <- 1 : n_B8S
theta_av
theta_av2
B8
B8S <- B8
n_B8S <- nrow(B8S)
z <- 1 : n_B8S
# for (i in z) {
#
#   if (B8S$ortho[i] == 1 && B8$theta_ang[i] > 90) {
#     B8S$theta_adj[i] <- B8S$theta_adj[i] + 90
#   }
#
# } # end loop
B8S
for (i in z) {
if (B8$ortho[i] == 0) { #buildings with non-orthogonal lines
B8S$theta_adj[i] <- theta_av2
}
} # end for
# for (i in z) {
#
#   if (B8S$ortho[i] == 1 && B8$theta_ang[i] > 90) {
#     B8S$theta_adj[i] <- B8S$theta_adj[i] + 90
#   }
#
# } # end loop
B8S
for (i in z) {
if (B8S$ortho[i] == 0 && B8$theta_ang[i] > 90) {
B8S$theta_adj[i] <- B8S$theta_adj[i] + 90
}
} # end loop
# for (i in z) {
#
#   if (B8S$ortho[i] == 1 && B8$theta_ang[i] > 90) {
#     B8S$theta_adj[i] <- B8S$theta_adj[i] + 90
#   }
#
# } # end loop
B8S
B8S
B8 <- B8S
phi_deg <- B8$theta_adj
phi_deg <- (-phi_deg) #change to math-system
options(digits=6)
cat("sequence of angles [degrees]:","\n")
print(phi_deg)
phi <- (phi_deg*pi/180)
m <- length(phi) # number of lines in object
A <- matrix(nrow=2*m, ncol=m) #matrix for building with m corners
A[,] <- 0
A <- design_mat(m,phi) #call of function
A
# Input of approximate coordinates
setwd(home_dir)
fname12 <- paste("./data/",Img_name,"/b",bnr2,"_coord_appr.txt",sep = "")
b01 <- read.table(fname12,col.names="xy")
b01 # approximate corner coordinates
b <- rep(0,m)
b <- b01$xy
n_b <-length(b01$xy)
b_mat <- matrix(nrow=n_b,ncol=2)
b_mat <- as.data.frame(b_mat)
b_mat[1:n_b,1] <- b
b_mat[1:n_b,2] <- 0
names(b_mat)[1:2] <- c("coo","ortho")
i <- 1
j <- 1
while (i <= n_B8) {
b_mat[j,2] <- b_xy_vertex$ortho[i]
b_mat[j+1,2] <- b_xy_vertex$ortho[i]
i <- i + 1
j <- 2*i - 1
} #end of loop i
b_mat
b <- b_mat$coo
##adjusted coordinates x,y
p <- adjust_coord(A,b) #function call
p
m1 <- length(p[,1])
m2 <- m1/2
#separated in x und y
Points_x <- rep(0,(m2+1))
Points_x[m2+1] <- p[1,1] #repeat first point (x-coordinate)
k <- 1
i <- 1
#loop i
while(i <= (2*m2 - 1)) {
Points_x[k] <- p[i,1]
k <- k + 1
i <- i + 2
} #end loop i
Points_y <- rep(0,m2+1)
Points_y[m2+1] <- p[2,1] #repeat first point (y-coordinated)
k <- 1
i <- 2
#loop i
while(i <= 2*m2){
Points_y[k] <- p[i,1]
k <- k + 1
i <- i + 2
} #end loop i
## final coordinates of corners
b_seri_xy2 <- cbind(Points_x,Points_y)
dimnames(b_seri_xy2)[[2]] <- list("x","-y")
row.names(b_seri_xy2) <- 1 : (m2+1)
k1 <- m2
i <- 0
#loop i
while(i < k1) {
i <- i + 1
x <- Points_x[i]
y <- Points_y[i]
points(x,y, pch=20, cex=1.5, col="green", asp=1)
lines(b_seri_xy2,  col="red", asp=1, type="l", lwd=2, lty=1)
}
cat("adjusted coordinates:","\n")
print(b_seri_xy2)
#output of final coordinates for plotting
setwd(home_dir)
fname14 <- paste("./results/",Img_name,"/b",bnr2,"_coord_adj_plot.txt",sep="")
write.table(b_seri_xy2,fname14)
#output of point_numbers (vertices) with intersecting line-pairs
f4 <- paste("./data/",Img_name,"/b",bnr2,"_PC_nr.txt",sep="")
setwd(home_dir)
line_nrs <- read.table(f4, col.names = "lnr")
line_nrs2 <- rep(0,m2)
i=1
while (i < m2) {
line_nrs2[i] <- line_nrs$lnr[i+1]
i <- i + 1
}
line_nrs2[m2] <- line_nrs$lnr[1]
intsec_linepair_vertex_coord <- matrix(nrow=m2, ncol=4)
intsec_linepair_vertex_coord [,1] <- paste(line_nrs$lnr,"_",line_nrs2,sep="")
intsec_linepair_vertex_coord [,2] <- 1 : m2
intsec_linepair_vertex_coord [,3:4] <- b_seri_xy2[1:m2,1:2]
#
print(intsec_linepair_vertex_coord)
f5 <- paste("./results/",Img_name,"/b",bnr2,"_intsec_linepair_vertex_coord.txt",sep="")
write.table (intsec_linepair_vertex_coord, f5)
#store bnr2 in a file containing all processed buildings
setwd(home_dir)
fname15 <- paste("./results/",Img_name,"/b_all.txt",sep="")
write.table(bnr2, file= fname15, row.names = F, col.names = F, append=TRUE)
#output of adjusted coordinates
setwd(home_dir)
fname13=paste("./results/",Img_name,"/b",bnr2,"_coord_adj.txt",sep="")
write.table(p,fname13)
cat("end of 'adjustment_of_corner_coordinates.R'-continue with 'plot results_on_references.R'","\n")
setwd(home_dir2)
source(paste("plot_results_on_references_v",v_nr,".R",sep=""))
B8
print(phi_deg)
phi <- (phi_deg*pi/180)
source("C:/Users/Joachim/R_programs/buildenh_jh/clone1/R/startup_buildenh_v1.1.R")
#loop
B8
B8S <- B8
n_B8S <- nrow(B8S)
z <- 1 : n_B8S
for (i in z) {
if (B8$ortho[i] == 0) { #buildings with non-orthogonal lines
B8S$theta_adj[i] <- theta_av2
}
} # end for
# for (i in z) {
#
#   if (B8S$ortho[i] == 1 && B8$theta_ang[i] > 90) {
#     B8S$theta_adj[i] <- B8S$theta_adj[i] + 90
#   }
#
# } # end loop
B8S
for (i in z) {
if (B8S$ortho[i] == 0 && B8$theta_ang[i] > 90) {
B8S$theta_adj[i] <- B8S$theta_adj[i] + 90
}
} # end loop
B8 <- B8S
B8
phi_deg <- B8$theta_adj
phi_deg <- (-phi_deg) #change to math-system
options(digits=6)
cat("sequence of angles [degrees]:","\n")
print(phi_deg)
phi <- (phi_deg*pi/180)
m <- length(phi) # number of lines in object
A <- matrix(nrow=2*m, ncol=m) #matrix for building with m corners
A[,] <- 0
A <- design_mat(m,phi) #call of function
A
# Input of approximate coordinates
setwd(home_dir)
fname12 <- paste("./data/",Img_name,"/b",bnr2,"_coord_appr.txt",sep = "")
b01 <- read.table(fname12,col.names="xy")
b01 # approximate corner coordinates
b <- rep(0,m)
b <- b01$xy
n_b <-length(b01$xy)
b_mat <- matrix(nrow=n_b,ncol=2)
b_mat <- as.data.frame(b_mat)
b_mat[1:n_b,1] <- b
b_mat[1:n_b,2] <- 0
names(b_mat)[1:2] <- c("coo","ortho")
i <- 1
j <- 1
while (i <= n_B8) {
b_mat[j,2] <- b_xy_vertex$ortho[i]
b_mat[j+1,2] <- b_xy_vertex$ortho[i]
i <- i + 1
j <- 2*i - 1
} #end of loop i
b_mat
b <- b_mat$coo
##adjusted coordinates x,y
p <- adjust_coord(A,b) #function call
p
m1 <- length(p[,1])
m2 <- m1/2
#separated in x und y
Points_x <- rep(0,(m2+1))
Points_x[m2+1] <- p[1,1] #repeat first point (x-coordinate)
k <- 1
i <- 1
#loop i
while(i <= (2*m2 - 1)) {
Points_x[k] <- p[i,1]
k <- k + 1
i <- i + 2
} #end loop i
Points_y <- rep(0,m2+1)
Points_y[m2+1] <- p[2,1] #repeat first point (y-coordinated)
k <- 1
i <- 2
#loop i
while(i <= 2*m2){
Points_y[k] <- p[i,1]
k <- k + 1
i <- i + 2
} #end loop i
## final coordinates of corners
b_seri_xy2 <- cbind(Points_x,Points_y)
dimnames(b_seri_xy2)[[2]] <- list("x","-y")
row.names(b_seri_xy2) <- 1 : (m2+1)
k1 <- m2
i <- 0
#loop i
while(i < k1) {
i <- i + 1
x <- Points_x[i]
y <- Points_y[i]
points(x,y, pch=20, cex=1.5, col="green", asp=1)
lines(b_seri_xy2,  col="red", asp=1, type="l", lwd=2, lty=1)
}
cat("adjusted coordinates:","\n")
print(b_seri_xy2)
#output of final coordinates for plotting
setwd(home_dir)
fname14 <- paste("./results/",Img_name,"/b",bnr2,"_coord_adj_plot.txt",sep="")
write.table(b_seri_xy2,fname14)
#output of point_numbers (vertices) with intersecting line-pairs
f4 <- paste("./data/",Img_name,"/b",bnr2,"_PC_nr.txt",sep="")
setwd(home_dir)
line_nrs <- read.table(f4, col.names = "lnr")
line_nrs2 <- rep(0,m2)
i=1
while (i < m2) {
line_nrs2[i] <- line_nrs$lnr[i+1]
i <- i + 1
}
line_nrs2[m2] <- line_nrs$lnr[1]
intsec_linepair_vertex_coord <- matrix(nrow=m2, ncol=4)
intsec_linepair_vertex_coord [,1] <- paste(line_nrs$lnr,"_",line_nrs2,sep="")
intsec_linepair_vertex_coord [,2] <- 1 : m2
intsec_linepair_vertex_coord [,3:4] <- b_seri_xy2[1:m2,1:2]
#
print(intsec_linepair_vertex_coord)
f5 <- paste("./results/",Img_name,"/b",bnr2,"_intsec_linepair_vertex_coord.txt",sep="")
write.table (intsec_linepair_vertex_coord, f5)
#store bnr2 in a file containing all processed buildings
setwd(home_dir)
fname15 <- paste("./results/",Img_name,"/b_all.txt",sep="")
write.table(bnr2, file= fname15, row.names = F, col.names = F, append=TRUE)
#output of adjusted coordinates
setwd(home_dir)
fname13=paste("./results/",Img_name,"/b",bnr2,"_coord_adj.txt",sep="")
write.table(p,fname13)
cat("end of 'adjustment_of_corner_coordinates.R'-continue with 'plot results_on_references.R'","\n")
setwd(home_dir2)
source(paste("plot_results_on_references_v",v_nr,".R",sep=""))
B8S
#plot object onto map (Ground Truth, map_ISPRS7)
par(mai = c(1.02,0.82,0.82,0.42)) #setup of margins/plot region [inches]
x=0
y=0
plot(x,-y, pch=3, cex=1.5,  cex.axis = 1.2, cex.lab=1.5, col="red", asp=1, xlim=c(1,1919), ylim=c(-2569,-1),
axes = TRUE, ann = T, frame.plot = TRUE, main = paste("building #", bnr2," of image '",Img_name,"'",sep = ""))
fname12 <- paste("./results/",Img_name,"/b",bnr2,"_coord_adj_plot.txt",sep="")
setwd(home_dir)
b <- read.table(fname12,header=T)
k1 <- nrow(b)
names(b) <- c("Points_x","Points_y")
cat("plot of building-outline","\n")
#loop
i <- 0
while(i < k1) {
i <- i+1
lines(b, col="black", asp=1, type="l", lwd=1, lty=1)
} #end while
if (answ == "Y") {
##plot of object(building) as graph
if (Img_name == "ISPRS7") {
#plot object onto map (Ground Truth, map_ISPRS7)
par(mai = c(1.02,0.82,0.82,0.42)) #setup of margins/plot region [inches]
x=0
y=0
plot(x,-y, pch=3, cex=1.5,  cex.axis = 1.2, cex.lab=1.5, col="red", asp=1, xlim=c(1,1887), ylim=c(-2557,-1),
axes = TRUE, ann = T, frame.plot = TRUE, main = paste("building #", bnr2," of image '",Img_name,"'",sep = ""))
} #end image7
if (Img_name == "ISPRS1") {
#plot object onto map (Ground Truth, map_ISPRS7)
par(mai = c(1.02,0.82,0.82,0.42)) #setup of margins/plot region [inches]
x=0
y=0
plot(x,-y, pch=3, cex=1.5,  cex.axis = 1.2, cex.lab=1.5, col="red", asp=1, xlim=c(1,1919), ylim=c(-2569,-1),
axes = TRUE, ann = T, frame.plot = TRUE, main = paste("building #", bnr2," of image '",Img_name,"'",sep = ""))
} #end image1
fname12 <- paste("./results/",Img_name,"/b",bnr2,"_coord_adj_plot.txt",sep="")
setwd(home_dir)
b <- read.table(fname12,header=T)
k1 <- nrow(b)
names(b) <- c("Points_x","Points_y")
cat("plot of building-outline","\n")
#loop
i <- 0
while(i < k1) {
i <- i+1
lines(b, col="black", asp=1, type="l", lwd=1, lty=1)
} #end while
} else { #poor agreement
cat ("start again with this object and select other values for 'cas' and/or 'sek' ","\n")
setwd(home_dir2)
source(paste("extract_single_building_v",v_nr,".R",sep = ""))
} #end if-else
